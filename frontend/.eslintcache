[{"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/index.tsx":"1","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/App.tsx":"2","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/inputSystem.ts":"3","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/constants/keybinds.ts":"4","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/index.tsx":"5","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/constants/keybinds.ts":"6","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/Simulator.ts":"7","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/PhaserEntityRenderer.ts":"8","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/InputSystem.ts":"9","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/Main.tsx":"10","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/main-scene.ts":"11","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/level-one.ts":"12","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/index.ts":"13","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/store.ts":"14","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/hooks.ts":"15","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/toolbarSlice.ts":"16","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/Toolbar.tsx":"17","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/gameInfoSlice.ts":"18","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/GameInfo.tsx":"19","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/playerHUDSlice.ts":"20","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/PlayerHUD.tsx":"21"},{"size":197,"mtime":1610800520788,"results":"22","hashOfConfig":"23"},{"size":12240,"mtime":1611507850330,"results":"24","hashOfConfig":"23"},{"size":994,"mtime":1610809232450,"results":"25","hashOfConfig":"23"},{"size":463,"mtime":1608673148839,"results":"26","hashOfConfig":"23"},{"size":590,"mtime":1621286062620,"results":"27","hashOfConfig":"28"},{"size":463,"mtime":1612009952096,"results":"29","hashOfConfig":"30"},{"size":7350,"mtime":1624482601000,"results":"31","hashOfConfig":"28"},{"size":5060,"mtime":1621288495430,"results":"32","hashOfConfig":"28"},{"size":3734,"mtime":1620928837200,"results":"33","hashOfConfig":"28"},{"size":1450,"mtime":1621282316900,"results":"34","hashOfConfig":"28"},{"size":5172,"mtime":1621283440080,"results":"35","hashOfConfig":"28"},{"size":3109,"mtime":1624482137200,"results":"36","hashOfConfig":"28"},{"size":497,"mtime":1612218440580,"results":"37","hashOfConfig":"28"},{"size":645,"mtime":1624562724350,"results":"38","hashOfConfig":"28"},{"size":349,"mtime":1620675474440,"results":"39","hashOfConfig":"28"},{"size":1048,"mtime":1620852295119,"results":"40","hashOfConfig":"28"},{"size":990,"mtime":1620930256700,"results":"41","hashOfConfig":"28"},{"size":941,"mtime":1621285225050,"results":"42","hashOfConfig":"28"},{"size":994,"mtime":1621286250010,"results":"43","hashOfConfig":"28"},{"size":899,"mtime":1624482369650,"results":"44","hashOfConfig":"28"},{"size":1425,"mtime":1621288388820,"results":"45","hashOfConfig":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ouzttf",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"ghla1v",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4mqxxv",{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"57"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"57"},"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/index.tsx",[],["101","102"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/App.tsx",["103"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/inputSystem.ts",["104"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/constants/keybinds.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/index.tsx",[],["105","106"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/constants/keybinds.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/Simulator.ts",["107","108","109"],"import PlayerEntity from '../../common/entity/PlayerEntity'\n\nimport InputSystem from \"./InputSystem\"\nimport MoveCommand from '../../common/command/MoveCommand'\nimport nengi from 'nengi'\nimport PhaserEntityRenderer from './PhaserEntityRenderer'\nimport { entityTypes, lobbyState, messageTypes, Sounds } from '../../common/types/types'\nimport LobbyStateMessage from '../../common/message/LobbyStateMessage'\nimport FireCommand from '../../common/command/FireCommand'\nimport BotEntity from '../../common/entity/BotEntity'\nimport BulletEntity from '../../common/entity/BulletEntity'\nimport NetLog from '../../common/message/NetLog'\nimport ZombieWaveMessage from '../../common/message/ZombieWaveMessage'\nimport ClientHudMessage from '../../common/message/ClientHudMessage'\nimport ClientStateMessage from '../../common/message/ClientStateMessage'\nimport { store } from './app/store';\nimport { changeSlot } from './features/toolbar/toolbarSlice'\nimport { updateGameInfo } from './features/gameinfo/gameInfoSlice'\nimport { updatePlayerHUD } from './features/playerhud/playerHUDSlice'\n\nclass Simulator {\n    input: InputSystem\n    entities: Map<number, any>\n    renderer: PhaserEntityRenderer\n\n    entityIdSelf : number\n    myEntity: PlayerEntity | null\n    prevHealth = 0\n\n    constructor(private nengiClient: nengi.Client, private scene: Phaser.Scene, sceneMap: Phaser.Tilemaps.Tilemap) {\n        this.input = new InputSystem()\n        this.entities = new Map()\n\n        this.entityIdSelf = -1\n\n        this.myEntity = null\n        this.renderer = new PhaserEntityRenderer(scene, sceneMap)\n    }\n\n    createEntity(entity: any) {\n        console.log(`creating new ${entity.protocol.name} entity (Simulator)`)\n\n        if (entity.protocol.name === entityTypes.PLAYER_ENTITY) {\n            let newEntity = new PlayerEntity(entity.x, entity.y)\n            Object.assign(newEntity, entity)\n            this.entities.set(newEntity.nid, newEntity)\n            this.renderer.createEntity(entity)\n\n            // debugger;\n            if (entity.nid === this.entityIdSelf) {\n                console.log(`Discovered local version of my remote entity, with id ${entity.nid}`)\n                this.myEntity = newEntity\n            }\n        }\n\n        if (entity.protocol.name === entityTypes.BOT_ENTITY) {\n            let newEntity = new BotEntity(entity.x, entity.y)\n            Object.assign(newEntity, entity)\n            this.entities.set(newEntity.nid, newEntity)\n            this.renderer.createEntity(entity)\n        }\n\n        if (entity.protocol.name === entityTypes.BULLET_ENTITY) {\n            this.scene.sound.play(Sounds.BULLET);\n\n            let newEntity = new BulletEntity(entity.x, entity.y, entity.rotation)\n            Object.assign(newEntity, entity)\n            this.entities.set(newEntity.nid, newEntity)\n            this.renderer.createEntity(entity)\n        }\n    }\n\n    updateEntity(update: any) {\n        const entity = this.entities.get(update.nid)\n\n        if (entity) {\n            entity[update.prop] = update.value\n            this.renderer.updateEntity(update)\n        } else {\n            console.log(`Tried to update entity ${update.nid} but it doesn't exist yet`)\n\n        }\n    }\n\n    deleteEntity(id: number) {\n        this.entities.delete(id)\n        this.renderer.deleteEntity(id)\n    }\n\n    processMessage(message: any) {\n\n        if (message.protocol.name === messageTypes.LOBBY_STATE_MESSAGE) {\n            const typedMessage: LobbyStateMessage = message\n\n            console.log(\"Recieved update on lobby state\")\n\n            if (typedMessage.state === lobbyState.WAITING_FOR_PLAYERS) {\n                this.renderer.displayText(`Waiting for players, currently ${typedMessage.playerCount} / ${typedMessage.lobbyMinimum}` )\n            }\n\n            if (typedMessage.state === lobbyState.IN_PROGRESS) {\n                // LOAD THE MAP\n                console.log(`Attempting to load scene ${typedMessage.scene}`)\n                this.renderer.loadLevel(typedMessage.scene, this.nengiClient)\n            }\n\n        }\n\n        if (message.protocol.name === messageTypes.CLIENT_STATE_MESSAGE) {\n            const typedMessage: ClientStateMessage = message\n\n            this.renderer.displayText(`You are dead - waiting for respawn` )\n        }\n\n        if (message.protocol.name === messageTypes.ZOMBIE_WAVE_MESSAGE) {\n            let {protocol, ...rest} = message;\n\n            store.dispatch(updateGameInfo(rest))\n        }\n\n        if (message.protocol.name === messageTypes.CLIENT_HUD_MESSAGE) {\n            let {protocol, ...rest} = message;\n            let currHealth = rest.health\n\n            console.log( this.prevHealth)\n            console.log(currHealth)\n\n            if (this.prevHealth > currHealth) {\n                console.log(\"Health was less\")\n                this.scene.sound.play(Sounds.ZOMBIE_BITE_ONE);\n            }\n\n            store.dispatch(updatePlayerHUD(rest))\n\n            this.prevHealth = currHealth\n        }\n\n        if (message.protocol.name === messageTypes.NET_LOG) {\n            const typedMessage: NetLog = message\n\n            console.log(\"Recieved NET_LOG message\")\n            console.log(typedMessage)\n        }\n\n        if (message.protocol.name === messageTypes.IDENTITY) {\n            // be able to access self from simular\n            console.log('Assigned my remote entity ID as ', message.entityId)\n            this.entityIdSelf = message.entityId\n            // Also create a self representation, in the rendered\n            this.renderer.processMessage(message)\n\n            // If we had already created entities (I.E we recieved IDENTIFY after the entities were sent - happens on low FPS ) -\n            // we should go and assign them to ourselves correctly now\n            let existingEntity = this.entities.get(message.entityId)\n            if (!existingEntity) {\n                console.log(\"Recieved identity before the entity, therefore no need to assign an entity at point of recieivng identity\")\n                return\n            } else {\n                this.myEntity = existingEntity\n                // Also setup rendereds reference to entity\n                this.renderer.assignClientEntity(message.entityId)\n            }\n\n        }\n\n        if (message.protocol.name === messageTypes.TOOLBAR_UPDATED_MESSAGE) {\n            store.dispatch(changeSlot(message.selectedSlot))\n        }\n    }\n\n    update(delta: number) {\n\n\n        // console.log(\"Calling update\")\n        const input = this.input.frameState\n\n        if (this.myEntity) {\n            let rotation = 0\n\n            // calculate the direction our character is facing\n            const { mouseX, mouseY } = this.renderer.getMouseCoords()\n\n            const spriteX = this.renderer.myEntity.x\n            const spriteY =  this.renderer.myEntity.y\n\n            rotation = Math.atan2( mouseY - spriteY, mouseX - spriteX)\n\n            // Send this frames movement info\n            if (input.mouseDown) {\n                this.nengiClient.addCommand(new FireCommand(mouseX, mouseY))\n            }\n\n            // console.log(rotation)\n            this.nengiClient.addCommand(new MoveCommand(input.w, input.a, input.s, input.d, rotation, delta))\n\n        } else {\n            // console.log(\"No entity found for player to move\")\n        }\n\n        this.input.releaseKeys()\n\n    }\n\n\n}\n\nexport default Simulator;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/PhaserEntityRenderer.ts",["110","111"],"\nimport nengi from 'nengi'\nimport PlayerGraphicClient from '../../common/graphics/PlayerGraphicClient'\nimport BotGraphicClient from '../../common/graphics/BotGraphicClient'\nimport { entityTypes, messageTypes } from '../../common/types/types'\nimport { SCENE_NAMES } from './game/index'\nimport BulletGraphicClient from '../../common/graphics/BulletGraphicClient'\nimport ZombieWaveMessage from '../../common/message/ZombieWaveMessage'\nimport ClientHudMessage from '../../common/message/ClientHudMessage'\n\nclass PhaserEntityRenderer {\n\n    entities: Map<number, any>\n    scene: Phaser.Scene\n    myId: string\n    myEntity: Phaser.GameObjects.Sprite\n    sceneMap: Phaser.Tilemaps.Tilemap\n\n    healthText: Phaser.GameObjects.Text\n    waveInfoText: Phaser.GameObjects.Text\n    hudText: Phaser.GameObjects.Text\n    stageText: Phaser.GameObjects.Text\n\n    constructor(scene: Phaser.Scene, sceneMap: Phaser.Tilemaps.Tilemap ) {\n        this.scene = scene\n        this.entities = new Map()\n        this.sceneMap = sceneMap\n    }\n\n    createEntity(entity: any) {\n        console.log(`creating new ${entity.protocol.name} entity ( Renderer )`)\n\n        if (entity.protocol.name === entityTypes.PLAYER_ENTITY) {\n            const clientEntity = new PlayerGraphicClient(this.scene, entity.x, entity.y)\n            this.scene.add.existing(clientEntity)\n            this.entities.set(entity.nid, clientEntity)\n\n            // We may already have an identity, in which case follow at point of recieving entity\n            if (entity.nid === this.myId) {\n                this.myEntity = clientEntity\n                this.setupCamera()\n            }\n        }\n\n        if (entity.protocol.name === entityTypes.BOT_ENTITY) {\n            const botEntity = new BotGraphicClient(this.scene, entity.x, entity.y)\n            this.scene.add.existing(botEntity)\n            this.entities.set(entity.nid, botEntity)\n        }\n\n        if (entity.protocol.name === entityTypes.BULLET_ENTITY) {\n            const bulletEntity = new BulletGraphicClient(this.scene, entity.x, entity.y)\n            this.scene.add.existing(bulletEntity)\n            this.entities.set(entity.nid, bulletEntity)\n        }\n\n    }\n\n    // We may already recieve identity AFTER recieving entities, in which case follow at point of recieving entity\n    assignClientEntity(entityId: number) {\n\n        let clientEntity = this.entities.get(entityId)\n        this.myEntity = clientEntity\n        this.setupCamera()\n    }\n\n    setupCamera() {\n        const camera = this.scene.cameras.main;\n        camera.startFollow(this.myEntity, true, 0.1, 0.1);\n\n        camera.setBounds(0, 0, this.sceneMap.widthInPixels, this.sceneMap.heightInPixels);\n        camera.zoom= 1\n    }\n\n    updateEntity(update: any) {\n        const entity = this.entities.get(update.nid)\n        entity[update.prop] = update.value\n        // debugger\n    }\n\n    deleteEntity(entityId: number) {\n        const entity = this.entities.get(entityId)\n\n        if (entity) {\n            entity.destroy()\n            this.entities.delete(entityId)\n        } else {\n            console.log(`Rendered tried to delete entity ${entityId} that doesn't exist `)\n        }\n    }\n\n    processMessage(message: any) {\n        if (message.protocol.name === messageTypes.IDENTITY) {\n            // Use this to track camera against the correct entity\n            this.myId = message.entityId\n            console.log('Assigned my remote entity ID as ', this.myId)\n        }\n    }\n\n    getMouseCoords() {\n        const pointer = this.scene.input.activePointer\n\n        return {\n            mouseX: pointer.worldX,\n            mouseY: pointer.worldY,\n        }\n\n    }\n\n    displayText(text: string) {\n        const textStyle:any = {\n            fill: \"#ffffff\",\n            align: \"center\",\n            fontSize: 30,\n            fontStyle: \"bold\"\n        };\n\n        const width = Number(this.scene.game.config.width);\n        const height = Number(this.scene.game.config.height);\n\n        if (!this.stageText) {\n            this.stageText = this.scene.add\n                .text(width / 2, height / 2 + 250, text, textStyle)\n                .setOrigin(0.5, 0);\n        } else {\n            this.stageText.text = text\n        }\n\n        // const loadingBar = this.scene.add.graphics();\n        // loadingBar.clear();\n        // loadingBar.fillStyle(0xffffff, 1);\n        // loadingBar.fillRect(width / 2 - 375, height / 2 - 25, 750 * value, 50);\n        // const mod = Phaser.Math.FloorTo(((value * 100) % 3) + 1, 0);\n        // const text = `Loading${\".\".repeat(mod)}${mod <= 2 ? \" \".repeat(3 - mod) : \"\"}`;\n\n    }\n\n    loadLevel(scene: string, nengiClient: nengi.Client) {\n\n        if (!Object.values(SCENE_NAMES).includes(scene as SCENE_NAMES)) {\n            debugger\n            console.warn(\"Unable to find scene \", scene)\n        } else {\n            let sceneName = scene as SCENE_NAMES\n            this.scene.scene.sleep(SCENE_NAMES.MAIN)\n            this.scene.scene.run(SCENE_NAMES[sceneName], { nengiClient })\n        }\n    }\n\n}\n\nexport default PhaserEntityRenderer\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/InputSystem.ts",[],["112","113"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/Main.tsx",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/main-scene.ts",["114","115"],"import nengi from \"nengi\";\nimport Phaser from \"phaser\";\nimport nengiConfig from \"../../../common/config/nengiConfig\";\nimport { ExtendedNengiTypes } from \"../../../common/types/custom-nengi-types\";\nimport Simulator from \"../Simulator\";\nimport RequestJoinGame from '../../../common/command/RequestJoinGame'\nimport ModifyToolbarCommand from '../../../common/command/ModifyToolbarCommand'\nimport { store } from '../app/store'\n// const sceneConfig: Phaser.Types.Scenes.SettingsConfig = {\n//   active: false,\n//   visible: false,\n//   key: \"Game\",\n// };\n\nexport class MainScene extends Phaser.Scene {\n  map: Phaser.Tilemaps.Tilemap;\n  worldLayer: Phaser.Tilemaps.StaticTilemapLayer;\n  nengiClient: ExtendedNengiTypes.Client;\n  simulator: Simulator;\n  last_ts: number\n\n  levelName = \"spawn_island\";\n  store: typeof store\n  oldState:  ReturnType<typeof store.getState>\n\n  init({ nengiClient, storeRef }: {nengiClient: any, storeRef: typeof store}) {\n    // super({});\n    this.nengiClient = nengiClient;\n    // try {\n    //     // @ts-ignore\n    //     const { nengiClient } = nengiClient;\n    //     this.nengiClient = nengiClient;\n\n    // } catch (e) {\n    //     console.log(\"Error extracting preBoot data\", e);\n    // }\n\n    // const client = new nengi.Client(\n    //   nengiConfig,\n    //   100\n    // ) as ExtendedNengiTypes.Client;\n    // this.nengiClient = client;\n\n      // Start listening for changes\n      // debugger\n    this.store = storeRef\n    this.store.subscribe(() => this.stateUpdated())\n\n\n  }\n\n  stateUpdated() {\n    // console.log(\"stat eupdated\")\n    const newState = this.store.getState()\n    console.log(newState)\n    // Do we need to make changes?\n\n    if (!this.oldState) {\n      const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n      this.nengiClient.addCommand(ModToolbarCommand)\n\n    } else {\n        if (this.oldState.toolbar.selectedSlot !== newState.toolbar.selectedSlot) {\n          const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n          this.nengiClient.addCommand(ModToolbarCommand)\n          debugger\n        }\n    }\n    // Trigger UIActions, then empty the actions array\n\n    // const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n    // this.nengiClient.addCommand(ModToolbarCommand)\n\n    // Optimise later - you'll alwayhs need to do atleast 1 action this way\n    // if (this.oldState.toolbar.selectedSlot !== newState.toolbar.selectedSlot) {\n    //   const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n    //   this.nengiClient.addCommand(ModToolbarCommand)\n    //   debugger\n    // }\n\n    this.oldState = newState\n\n\n  }\n\n\n  public preload() {\n    this.load.image(\"player\", \"survivor-shotgun.png\");\n\n    this.load.image(\"tiles\", \"tuxmon-sample-32px-extruded.png\");\n    this.load.tilemapTiledJSON(this.levelName, this.levelName + \".json\");\n  }\n\n  public create(data: any) {\n    this.map = this.make.tilemap({ key: this.levelName });\n\n    const tileset = this.map.addTilesetImage(\n      \"tuxmon-sample-32px-extruded\",\n      \"tiles\"\n    );\n\n    //@ts-ignore\n    this.map.createStaticLayer(\n      \"Below Player\",\n      tileset,\n      0,\n      0\n    );\n\n    //@ts-ignore\n\n    this.worldLayer = this.map.createStaticLayer(\"World\", tileset, 0, 0);\n    // this.worldLayer.setCollisionByProperty({ collides: true });\n\n    // ------------ NENGI ------------------//\n\n    this.simulator = new Simulator(this.nengiClient, this, this.map);\n\n    this.nengiClient.onConnect((res) => {\n      console.log(\"onConnect response:\", res);\n    });\n\n    this.nengiClient.onClose(() => {\n      console.log(\"connection closed\");\n    });\n\n    this.nengiClient.on(\"connected\", (res) => {\n      console.log(\"connection?:\", res);\n    });\n    this.nengiClient.on(\"disconnected\", () => {\n      console.log(\"connection closed\");\n    });\n\n    this.nengiClient.connect(\"ws://localhost:8079\");\n\n    // console.log(\"Requesting to join game in 5 seconds\")\n\n    console.log(\"Requesting to join game\")\n    const RequestJoinGameCommand = new RequestJoinGame(\"\")\n    this.nengiClient.addCommand(RequestJoinGameCommand)\n\n  }\n\n  public update() {\n\n    // Compute delta time since last update.\n    const now_ts = +new Date();\n    const last_ts = this.last_ts || now_ts;\n    const dt_sec = (now_ts - last_ts) / 1000.0;\n    this.last_ts = now_ts;\n\n    const network = this.nengiClient.readNetwork();\n\n    network.entities.forEach((snapshot: any) => {\n      snapshot.createEntities.forEach((entity: any) => {\n        console.log(`creating new ${entity.protocol.name} entity `, entity)\n        this.simulator.createEntity(entity)\n      })\n\n      snapshot.updateEntities.forEach((update: any) => {\n\n        this.simulator.updateEntity(update)\n      })\n\n      snapshot.deleteEntities.forEach((id: number) => {\n        console.log(`Deleting entity `, id)\n        this.simulator.deleteEntity(id)\n      })\n    })\n\n    network.messages.forEach((message: any) => {\n      console.log(`Recieved ${message.protocol.name} message:`, message);\n      this.simulator.processMessage(message)\n    });\n\n    this.simulator.update(dt_sec);\n    this.nengiClient.update();\n  }\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/level-one.ts",["116","117"],"import nengi from \"nengi\";\nimport Phaser from \"phaser\";\nimport RequestSpawn from \"../../../common/command/RequestSpawn\";\nimport { ExtendedNengiTypes } from \"../../../common/types/custom-nengi-types\";\nimport { Sounds } from \"../../../common/types/types\";\nimport { SCENE_NAMES } from \"../game\";\nimport Simulator from \"../Simulator\";\n\nexport class LevelOne extends Phaser.Scene {\n  map: Phaser.Tilemaps.Tilemap;\n  worldLayer: Phaser.Tilemaps.StaticTilemapLayer;\n  nengiClient: ExtendedNengiTypes.Client;\n  simulator: Simulator;\n  last_ts: number\n  levelName = \"zm_castle\";\n\n  public preload() {\n    console.log(\"Pre-load level one\")\n\n    this.load.image(\"player\", \"survivor-shotgun.png\");\n    this.load.image(\"zombie\", \"zombie.png\");\n    this.load.image(\"bullet\", \"bullet.png\");\n\n    this.load.image(\"tiles\", \"tuxmon-sample-32px-extruded.png\");\n    this.load.tilemapTiledJSON(this.levelName, \"zm_castle.json\");\n\n    this.load.audio(Sounds.BULLET, 'bullet.mp3');\n    this.load.audio(Sounds.ZOMBIE_BITE_ONE, 'zombie_bite_one.mp3');\n\n  }\n\n  create({ nengiClient }: { nengiClient: ExtendedNengiTypes.Client }) {\n\n    // this.load.audio(Sounds.BULLET);\n    // var music = this.scene.sound.add(Sounds.BULLET);\n\n    //  debugger\n    console.log(\"Create level one\")\n    this.nengiClient = nengiClient\n\n    this.map = this.make.tilemap({ key: this.levelName });\n\n    const tileset = this.map.addTilesetImage(\n      \"tuxmon-sample-32px-extruded\",\n      \"tiles\"\n    );\n\n    //@ts-ignore\n    this.map.createStaticLayer(\n      \"Below Player\",\n      tileset,\n      0,\n      0\n\n    );\n\n    //@ts-ignore\n    this.worldLayer = this.map.createStaticLayer(\"LevelOneWorld\", tileset, 0, 0);\n    // this.worldLayer.setCollisionByProperty({ collides: true });\n    this.simulator = new Simulator(this.nengiClient, this, this.map);\n\n    const RequestSpawnCommand = new RequestSpawn(\"\")\n    this.nengiClient.addCommand(RequestSpawnCommand)\n\n  }\n\n  public update() {\n    // console.log(\"Running level one update\")\n    // console.log(this.map)\n    // Compute delta time since last update.\n    const now_ts = +new Date();\n    const last_ts = this.last_ts || now_ts;\n    const dt_sec = (now_ts - last_ts) / 1000.0;\n    this.last_ts = now_ts;\n\n    const network = this.nengiClient.readNetwork();\n\n    network.entities.forEach((snapshot: any) => {\n      snapshot.createEntities.forEach((entity: any) => {\n        // console.log(`creating new ${entity.protocol.name} entity `, entity)\n        this.simulator.createEntity(entity)\n      })\n\n      snapshot.updateEntities.forEach((update: any) => {\n        // console.log(`Updating entity ${update.nid}`)\n        this.simulator.updateEntity(update)\n      })\n\n      snapshot.deleteEntities.forEach((id: number) => {\n        // console.log(`Deleting entity `, id)\n        this.simulator.deleteEntity(id)\n      })\n    })\n\n    network.messages.forEach((message: any) => {\n      // console.log(`Recieved ${message.protocol.name} message:`, message);\n      this.simulator.processMessage(message)\n    });\n\n    // console.log(dt_sec)\n    this.simulator.update(dt_sec);\n    this.nengiClient.update();\n  }\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/index.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/store.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/hooks.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/toolbarSlice.ts",["118","119","120","121"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface Toolbar {\n  selectedSlot: number;\n  slotData: ToolbarSlot[];\n}\n\ntype ToolbarSlot = {\n    name: string;\n    image: string;\n}\n\nconst initialState: Toolbar = {\n  selectedSlot: 0,\n    slotData: [\n        {\n            name: \"pistol\", image: \"./toolbar-pistol.png\"\n        },\n        {\n            name: \"smg\", image: \"./toolbar_smg.png\"\n        },\n        {\n            name: \"\", image: \"\"\n        },\n        {\n            name: \"\", image: \"\"\n        },\n    ],\n};\n\nexport const toolbarSlice = createSlice({\n  name: 'toolbar',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    changeSlot: (state, action) => {\n      state.selectedSlot = action.payload;\n    },\n  },\n});\n\nexport const { changeSlot } = toolbarSlice.actions;\n\nexport const changeToSlot = (index: number) => {\n    changeSlot(index)\n}\n\nexport default toolbarSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/Toolbar.tsx",["122"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { changeSlot } from \"./toolbarSlice\";\n\nexport function Toolbar() {\n  const selectedSlot = useAppSelector((state) => state.toolbar.selectedSlot);\n  const slotData = useAppSelector((state) => state.toolbar.slotData);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <div className=\"flex p-2 fixed bottom-2 left-2 select-none\">\n      {slotData.map((data, index) => {\n        return (\n            <div className={`\n                m-1 border-2 bg-opacity-50 ${selectedSlot === index ? \"border-white border-4 bg-gray-200\" : \"border-grey bg-gray-600\"}\n            `}>\n            <div style={{ backgroundImage:`url(${data.image})` }} className=\"h-20 w-20 bg-center\" onClick={() => dispatch(changeSlot(index))}>\n                    {/* <img src={data.image} alt=\"\" className=\"object-cover\" /> */}\n                </div>\n\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/gameInfoSlice.ts",["123","124","125"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport ZombieWaveMessage from '../../../../common/message/ZombieWaveMessage';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface GameInfo extends ZombieWaveMessage{}\n\nconst initialState: GameInfo = {\n  currentWave: 0,\n  waveSize: 0,\n  zombiesRemaining: 0,\n  zombiesKilled: 0,\n  zombiesAlive: 0,\n  playersAlive: 0,\n  playersTotal: 0,\n  gameStatus : \"N/A\"\n};\n\n\nexport const gameInfoSlice = createSlice({\n  name: 'gameinfo',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updateGameInfo: (state, action: PayloadAction<GameInfo>) => {\n      return {...state, ...action.payload}\n    },\n  },\n});\n\nexport const { updateGameInfo } = gameInfoSlice.actions;\n\n// export const changeToSlot = (index: number) => {\n//     changeSlot(index)\n// }\n\nexport default gameInfoSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/GameInfo.tsx",["126","127"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\n\nexport function GameInfo() {\n  const gameInfo = useAppSelector((state) => state.gameInfo);\n\n  return (\n    <div className=\"text-white flex-col p-2 fixed top-2 left-2 w-80 select-none bg-opacity-50 border-grey bg-gray-600 m-1 border-2\">\n      {/* {gameInfo.currentWave} */}\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Game State : {gameInfo.gameStatus}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Zombies Remaining : {gameInfo.zombiesRemaining}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Zombies Killed : {gameInfo.zombiesKilled}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Zombies Alive : {gameInfo.zombiesAlive}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Players : {gameInfo.playersAlive}\n      </div>\n    </div>\n  );\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/playerHUDSlice.ts",["128","129","130"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport ClientHudMessage from '../../../../common/message/ClientHudMessage';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface PlayerHUD extends ClientHudMessage{}\n\nconst initialState: PlayerHUD = {\n   health: 100,\n   ammo: \"\",\n   gunName: \"\",\n};\n\n\nexport const playerHUDSlice = createSlice({\n  name: 'gameinfo',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updatePlayerHUD: (state, action: PayloadAction<PlayerHUD>) => {\n\n      console.log({action})\n      return {\n        ammo: action.payload.ammo,\n        gunName: action.payload.gunName,\n        health: action.payload.health,\n        // ...state,\n      }\n    },\n  },\n});\n\nexport const { updatePlayerHUD } = playerHUDSlice.actions;\n\nexport default playerHUDSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/PlayerHUD.tsx",["131","132"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\n\nexport function PlayerHUD() {\n  const playerHud = useAppSelector((state) => state.playerHUD);\n\n  let className=\"bg-green-500 bg-opacity-30 \"\n\n  if (playerHud.health >30 && playerHud.health <70) {\n    className=\"bg-yellow-500 bg-opacity-30 \"\n  }\n\n  if (playerHud.health <30) {\n    className=\"bg-red-500 bg-opacity-30 \"\n\n  }\n\n  return (\n    <div className=\"text-white fixed bottom-2 right-2 w-80 select-none bg-opacity-50 border-grey bg-gray-600 m-1 border-2\">\n      {/* <div className=\"shadow w-full bg-grey-light mt-2\"> */}\n      <span className=\"text-xs font-semibold py-1 px-2 uppercase rounded-full text-amber-600 bg-amber-200\">\n            Health\n          </span>\n      <div style={{ width: playerHud.health + \"%\" }} className={`${className} text-xs leading-none py-1 text-center text-white`}>\n          {playerHud.health}\n        {/* </div> */}\n      </div>\n\n      {/* <div className=\"relative pt-1\">\n        <div className=\"flex mb-2 items-center justify-between\">\n          <div>\n            <span className=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-amber-600 bg-amber-200\">\n              Health\n            </span>\n          </div>\n          <div className=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-amber-200\"></div>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":78,"column":11,"nodeType":"139","messageId":"140","endLine":78,"endColumn":21},{"ruleId":"137","severity":1,"message":"141","line":1,"column":10,"nodeType":"139","messageId":"140","endLine":1,"endColumn":19},{"ruleId":"133","replacedBy":"142"},{"ruleId":"135","replacedBy":"143"},{"ruleId":"137","severity":1,"message":"144","line":13,"column":8,"nodeType":"139","messageId":"140","endLine":13,"endColumn":25},{"ruleId":"137","severity":1,"message":"145","line":14,"column":8,"nodeType":"139","messageId":"140","endLine":14,"endColumn":24},{"ruleId":"137","severity":1,"message":"146","line":110,"column":19,"nodeType":"139","messageId":"140","endLine":110,"endColumn":51},{"ruleId":"137","severity":1,"message":"144","line":8,"column":8,"nodeType":"139","messageId":"140","endLine":8,"endColumn":25},{"ruleId":"137","severity":1,"message":"145","line":9,"column":8,"nodeType":"139","messageId":"140","endLine":9,"endColumn":24},{"ruleId":"133","replacedBy":"147"},{"ruleId":"135","replacedBy":"148"},{"ruleId":"137","severity":1,"message":"149","line":1,"column":8,"nodeType":"139","messageId":"140","endLine":1,"endColumn":13},{"ruleId":"137","severity":1,"message":"150","line":3,"column":8,"nodeType":"139","messageId":"140","endLine":3,"endColumn":19},{"ruleId":"137","severity":1,"message":"149","line":1,"column":8,"nodeType":"139","messageId":"140","endLine":1,"endColumn":13},{"ruleId":"137","severity":1,"message":"151","line":6,"column":10,"nodeType":"139","messageId":"140","endLine":6,"endColumn":21},{"ruleId":"137","severity":1,"message":"152","line":1,"column":10,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"153","line":1,"column":41,"nodeType":"139","messageId":"140","endLine":1,"endColumn":54},{"ruleId":"137","severity":1,"message":"154","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":19},{"ruleId":"137","severity":1,"message":"155","line":2,"column":21,"nodeType":"139","messageId":"140","endLine":2,"endColumn":29},{"ruleId":"137","severity":1,"message":"156","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"152","line":1,"column":10,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"154","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":19},{"ruleId":"137","severity":1,"message":"155","line":3,"column":21,"nodeType":"139","messageId":"140","endLine":3,"endColumn":29},{"ruleId":"137","severity":1,"message":"156","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"157","line":3,"column":26,"nodeType":"139","messageId":"140","endLine":3,"endColumn":40},{"ruleId":"137","severity":1,"message":"152","line":1,"column":10,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"154","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":19},{"ruleId":"137","severity":1,"message":"155","line":3,"column":21,"nodeType":"139","messageId":"140","endLine":3,"endColumn":29},{"ruleId":"137","severity":1,"message":"156","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"157","line":3,"column":26,"nodeType":"139","messageId":"140","endLine":3,"endColumn":40},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"@typescript-eslint/no-unused-vars","'belowLayer' is assigned a value but never used.","Identifier","unusedVar","'ArrowKeys' is defined but never used.",["158"],["159"],"'ZombieWaveMessage' is defined but never used.","'ClientHudMessage' is defined but never used.","'typedMessage' is assigned a value but never used.",["158"],["159"],"'nengi' is defined but never used.","'nengiConfig' is defined but never used.","'SCENE_NAMES' is defined but never used.","'createAsyncThunk' is defined but never used.","'PayloadAction' is defined but never used.","'RootState' is defined but never used.","'AppThunk' is defined but never used.","'useState' is defined but never used.","'useAppDispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]