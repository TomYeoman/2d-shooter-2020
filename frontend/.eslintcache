[{"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/index.tsx":"1","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/App.tsx":"2","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/inputSystem.ts":"3","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/constants/keybinds.ts":"4","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/index.tsx":"5","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/constants/keybinds.ts":"6","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/Simulator.ts":"7","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/PhaserEntityRenderer.ts":"8","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/InputSystem.ts":"9","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/Main.tsx":"10","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/main-scene.ts":"11","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/level-one.ts":"12","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/index.ts":"13"},{"size":197,"mtime":1610800520788,"results":"14","hashOfConfig":"15"},{"size":12240,"mtime":1611507850330,"results":"16","hashOfConfig":"15"},{"size":994,"mtime":1610809232450,"results":"17","hashOfConfig":"15"},{"size":463,"mtime":1608673148839,"results":"18","hashOfConfig":"15"},{"size":205,"mtime":1612050990080,"results":"19","hashOfConfig":"20"},{"size":463,"mtime":1612009952096,"results":"21","hashOfConfig":"22"},{"size":6859,"mtime":1620326119614,"results":"23","hashOfConfig":"20"},{"size":7950,"mtime":1619120731690,"results":"24","hashOfConfig":"20"},{"size":3582,"mtime":1612017995030,"results":"25","hashOfConfig":"20"},{"size":940,"mtime":1620153007493,"results":"26","hashOfConfig":"20"},{"size":3335,"mtime":1619166741643,"results":"27","hashOfConfig":"20"},{"size":2831,"mtime":1618077342000,"results":"28","hashOfConfig":"20"},{"size":497,"mtime":1612218440580,"results":"29","hashOfConfig":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ouzttf",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"ghla1v",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4mqxxv",{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/index.tsx",[],["62","63"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/App.tsx",["64"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/inputSystem.ts",["65"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/constants/keybinds.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/index.tsx",[],["66","67"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/constants/keybinds.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/Simulator.ts",["68"],"import PlayerEntity from '../../common/entity/PlayerEntity'\n\nimport InputSystem from \"./InputSystem\"\nimport MoveCommand from '../../common/command/MoveCommand'\nimport nengi from 'nengi'\nimport PhaserEntityRenderer from './PhaserEntityRenderer'\nimport { entityTypes, lobbyState, messageTypes } from '../../common/types/types'\nimport LobbyStateMessage from '../../common/message/LobbyStateMessage'\nimport FireCommand from '../../common/command/FireCommand'\nimport BotEntity from '../../common/entity/BotEntity'\nimport BulletEntity from '../../common/entity/BulletEntity'\nimport NetLog from '../../common/message/NetLog'\nimport ZombieWaveMessage from '../../common/message/ZombieWaveMessage'\nimport ClientHudMessage from '../../common/message/ClientHudMessage'\nimport ClientStateMessage from '../../common/message/ClientStateMessage'\n\nclass Simulator {\n\n    nengiClient: nengi.Client\n    input: InputSystem\n    entities: Map<number, any>\n    renderer: PhaserEntityRenderer\n\n    entityIdSelf : number\n    myEntity : PlayerEntity | null\n\n    constructor(nengiClient: nengi.Client, phaserInstance: Phaser.Scene, sceneMap: Phaser.Tilemaps.Tilemap) {\n        this.nengiClient = nengiClient\n        this.input = new InputSystem()\n        this.entities = new Map()\n\n        this.entityIdSelf = -1\n\n\n        this.myEntity = null\n        this.renderer = new PhaserEntityRenderer(phaserInstance, sceneMap)\n    }\n\n    createEntity(entity: any) {\n        console.log(`creating new ${entity.protocol.name} entity (Simulator)`)\n\n        if (entity.protocol.name === entityTypes.PLAYER_ENTITY) {\n            let newEntity = new PlayerEntity(entity.x, entity.y)\n            Object.assign(newEntity, entity)\n            this.entities.set(newEntity.nid, newEntity)\n            this.renderer.createEntity(entity)\n\n            // debugger;\n            if (entity.nid === this.entityIdSelf) {\n                console.log(`Discovered local version of my remote entity, with id ${entity.nid}`)\n                this.myEntity = newEntity\n            }\n        }\n\n        if (entity.protocol.name === entityTypes.BOT_ENTITY) {\n            let newEntity = new BotEntity(entity.x, entity.y)\n            Object.assign(newEntity, entity)\n            this.entities.set(newEntity.nid, newEntity)\n            this.renderer.createEntity(entity)\n        }\n\n        if (entity.protocol.name === entityTypes.BULLET_ENTITY) {\n            let newEntity = new BulletEntity(entity.x, entity.y, entity.rotation)\n            Object.assign(newEntity, entity)\n            this.entities.set(newEntity.nid, newEntity)\n            this.renderer.createEntity(entity)\n        }\n    }\n\n    updateEntity(update: any) {\n        const entity = this.entities.get(update.nid)\n\n        if (entity) {\n            entity[update.prop] = update.value\n            this.renderer.updateEntity(update)\n        } else {\n            console.log(`Tried to update entity ${update.nid} but it doesn't exist yet`)\n\n        }\n    }\n\n    deleteEntity(id: number) {\n        this.entities.delete(id)\n        this.renderer.deleteEntity(id)\n    }\n\n    processMessage(message: any) {\n\n        if (message.protocol.name === messageTypes.LOBBY_STATE_MESSAGE) {\n            const typedMessage: LobbyStateMessage = message\n\n            console.log(\"Recieved update on lobby state\")\n\n            if (typedMessage.state === lobbyState.WAITING_FOR_PLAYERS) {\n                this.renderer.displayText(`Waiting for players, currently ${typedMessage.playerCount} / ${typedMessage.lobbyMinimum}` )\n            }\n\n            if (typedMessage.state === lobbyState.IN_PROGRESS) {\n                // LOAD THE MAP\n                console.log(`Attempting to load scene ${typedMessage.scene}`)\n                this.renderer.loadLevel(typedMessage.scene, this.nengiClient)\n            }\n\n        }\n\n        if (message.protocol.name === messageTypes.CLIENT_STATE_MESSAGE) {\n            const typedMessage: ClientStateMessage = message\n\n            this.renderer.displayText(`You are dead - waiting for respawn` )\n\n\n        }\n\n        if (message.protocol.name === messageTypes.ZOMBIE_WAVE_MESSAGE) {\n            const typedMessage: ZombieWaveMessage = message\n\n            console.log(\"Recieved update on zombie waves\")\n            console.log(typedMessage)\n\n            this.renderer.displayWaveHud(typedMessage)\n        }\n\n        if (message.protocol.name === messageTypes.CLIENT_HUD_MESSAGE) {\n            const typedMessage: ClientHudMessage = message\n\n            console.log(\"Recieved update on player HUD\")\n            console.log(typedMessage)\n\n            this.renderer.displayUserHUD(typedMessage)\n\n        }\n\n        if (message.protocol.name === messageTypes.NET_LOG) {\n            const typedMessage: NetLog = message\n\n            console.log(\"Recieved NET_LOG message\")\n            console.log(typedMessage)\n        }\n\n        if (message.protocol.name === messageTypes.IDENTITY) {\n            // be able to access self from simular\n            console.log('Assigned my remote entity ID as ', message.entityId)\n            this.entityIdSelf = message.entityId\n            // Also create a self representation, in the rendered\n            this.renderer.processMessage(message)\n\n            // If we had already created entities (I.E we recieved IDENTIFY after the entities were sent - happens on low FPS ) -\n            // we should go and assign them to ourselves correctly now\n            let existingEntity = this.entities.get(message.entityId)\n            if (!existingEntity) {\n                console.log(\"Recieved identity before the entity, therefore no need to assign an entity at point of recieivng identity\")\n                return\n            } else {\n                this.myEntity = existingEntity\n                // Also setup rendereds reference to entity\n                this.renderer.assignClientEntity(message.entityId)\n            }\n\n        }\n    }\n\n    update(delta: number) {\n\n\n        // console.log(\"Calling update\")\n        const input = this.input.frameState\n\n        if (this.myEntity) {\n            let rotation = 0\n\n            // calculate the direction our character is facing\n            const { mouseX, mouseY } = this.renderer.getMouseCoords()\n\n            const spriteX = this.renderer.myEntity.x\n            const spriteY =  this.renderer.myEntity.y\n\n            rotation = Math.atan2( mouseY - spriteY, mouseX - spriteX)\n\n            // Send this frames movement info\n            if (input.mouseDown) {\n                this.nengiClient.addCommand(new FireCommand(mouseX, mouseY))\n            }\n\n            // console.log(rotation)\n            this.nengiClient.addCommand(new MoveCommand(input.w, input.a, input.s, input.d, rotation, delta))\n\n        } else {\n            // console.log(\"No entity found for player to move\")\n        }\n\n        this.input.releaseKeys()\n\n    }\n\n\n}\n\nexport default Simulator;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/PhaserEntityRenderer.ts",[],["69","70"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/InputSystem.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/Main.tsx",["71"],"import nengi from \"nengi\";\nimport { clientFPS, phaserGameConfig } from \"../../../common/config/phaserConfig\";\nimport { installScenes } from \".\";\nimport {SCENE_NAMES} from \"../../../common/types/types\"\n\nexport const newGame = () => {\n\n    const gameConfig: Phaser.Types.Core.GameConfig = {\n        ...phaserGameConfig,\n        type: Phaser.AUTO,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        fps: {\n            target: clientFPS,\n            forceSetTimeOut: true,\n        },\n        parent: \"game-here\",\n        // scene: MainScene,\n    };\n\n    const phaserGame = new Phaser.Game(gameConfig);\n\n    // Add scenes to our game for later (loading, menu, main, and settings)\n    installScenes(phaserGame);\n\n    phaserGame.scene.start(SCENE_NAMES.MAIN)\n    return phaserGame\n};\n\nconst phaserGame = newGame()\n\nconst Main = () => {\n    return <div id=\"game-here\"></div>;\n};\n\nexport {phaserGame}\nexport default Main;\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/main-scene.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/level-one.ts",["72","73"],"import nengi from \"nengi\";\nimport Phaser from \"phaser\";\nimport RequestSpawn from \"../../../common/command/RequestSpawn\";\nimport { ExtendedNengiTypes } from \"../../../common/types/custom-nengi-types\";\nimport { SCENE_NAMES } from \"../game\";\nimport Simulator from \"../Simulator\";\n\nexport class LevelOne extends Phaser.Scene {\n  map: Phaser.Tilemaps.Tilemap;\n  worldLayer: Phaser.Tilemaps.StaticTilemapLayer;\n  nengiClient: ExtendedNengiTypes.Client;\n  simulator: Simulator;\n  last_ts: number\n  levelName = \"zm_castle\";\n\n  public preload() {\n    console.log(\"Pre-load level one\")\n\n    this.load.image(\"player\", \"survivor-shotgun.png\");\n    this.load.image(\"zombie\", \"zombie.png\");\n    this.load.image(\"bullet\", \"bullet.png\");\n\n    this.load.image(\"tiles\", \"tuxmon-sample-32px-extruded.png\");\n    this.load.tilemapTiledJSON(this.levelName, \"zm_castle.json\");\n\n  }\n\n  create({ nengiClient }: { nengiClient: ExtendedNengiTypes.Client }) {\n    //  debugger\n    console.log(\"Create level one\")\n    this.nengiClient = nengiClient\n\n    this.map = this.make.tilemap({ key: this.levelName });\n\n    const tileset = this.map.addTilesetImage(\n      \"tuxmon-sample-32px-extruded\",\n      \"tiles\"\n    );\n\n    //@ts-ignore\n    this.map.createStaticLayer(\n      \"Below Player\",\n      tileset,\n      0,\n      0\n\n    );\n\n    //@ts-ignore\n    this.worldLayer = this.map.createStaticLayer(\"LevelOneWorld\", tileset, 0, 0);\n    // this.worldLayer.setCollisionByProperty({ collides: true });\n    this.simulator = new Simulator(this.nengiClient, this, this.map);\n\n    const RequestSpawnCommand = new RequestSpawn(\"\")\n    this.nengiClient.addCommand(RequestSpawnCommand)\n\n\n  }\n\n  public update() {\n    // console.log(\"Running level one update\")\n    // console.log(this.map)\n    // Compute delta time since last update.\n    const now_ts = +new Date();\n    const last_ts = this.last_ts || now_ts;\n    const dt_sec = (now_ts - last_ts) / 1000.0;\n    this.last_ts = now_ts;\n\n    const network = this.nengiClient.readNetwork();\n\n    network.entities.forEach((snapshot: any) => {\n      snapshot.createEntities.forEach((entity: any) => {\n        console.log(`creating new ${entity.protocol.name} entity `, entity)\n        this.simulator.createEntity(entity)\n      })\n\n      snapshot.updateEntities.forEach((update: any) => {\n        // console.log(`Updating entity ${update.nid}`)\n        this.simulator.updateEntity(update)\n      })\n\n      snapshot.deleteEntities.forEach((id: number) => {\n        console.log(`Deleting entity `, id)\n        this.simulator.deleteEntity(id)\n      })\n    })\n\n    network.messages.forEach((message: any) => {\n      console.log(`Recieved ${message.protocol.name} message:`, message);\n      this.simulator.processMessage(message)\n    });\n\n    // console.log(dt_sec)\n    this.simulator.update(dt_sec);\n    this.nengiClient.update();\n  }\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/index.ts",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":78,"column":11,"nodeType":"80","messageId":"81","endLine":78,"endColumn":21},{"ruleId":"78","severity":1,"message":"82","line":1,"column":10,"nodeType":"80","messageId":"81","endLine":1,"endColumn":19},{"ruleId":"74","replacedBy":"83"},{"ruleId":"76","replacedBy":"84"},{"ruleId":"78","severity":1,"message":"85","line":107,"column":19,"nodeType":"80","messageId":"81","endLine":107,"endColumn":51},{"ruleId":"74","replacedBy":"86"},{"ruleId":"76","replacedBy":"87"},{"ruleId":"78","severity":1,"message":"88","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"88","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"89","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":21},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'belowLayer' is assigned a value but never used.","Identifier","unusedVar","'ArrowKeys' is defined but never used.",["90"],["91"],"'typedMessage' is assigned a value but never used.",["90"],["91"],"'nengi' is defined but never used.","'SCENE_NAMES' is defined but never used.","no-global-assign","no-unsafe-negation"]